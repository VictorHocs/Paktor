// Generated by CoffeeScript 1.9.1
(function() {
  angular.module('PaktorApp').directive('debugScope', function($log) {
    return function(scope, element) {
      var printScopeTree, printScopeValue;
      printScopeValue = function(scope) {
        var $parent, gap, p, results, v;
        gap = [];
        $parent = scope.$parent;
        while ($parent) {
          $parent = $parent.$parent;
          gap.push('#');
        }
        gap = gap.join('');
        gap += '---------------';
        $log.debug(gap, '$id:', scope.$id);
        results = [];
        for (p in scope) {
          v = scope[p];
          if (scope.hasOwnProperty(p) && p.indexOf('$') === -1 && p !== 'this' && p !== 'constructor') {
            if (!(v instanceof Function)) {
              results.push($log.debug(p, ':', v));
            } else {
              results.push($log.debug(p, ': function'));
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      printScopeTree = function(scope) {
        var $$childHead, $$nextSibling, i, len, results, s, scopes;
        printScopeValue(scope);
        $$childHead = scope.$$childHead;
        scopes = [];
        if ($$childHead) {
          scopes.push($$childHead);
          $$nextSibling = $$childHead.$$nextSibling;
          while ($$nextSibling) {
            scopes.push($$nextSibling);
            $$nextSibling = $$nextSibling.$$nextSibling;
          }
        }
        results = [];
        for (i = 0, len = scopes.length; i < len; i++) {
          s = scopes[i];
          results.push(printScopeTree(s));
        }
        return results;
      };
      return element.on('dblclick', function() {
        return printScopeTree(scope);
      });
    };
  });

}).call(this);

//# sourceMappingURL=DebugScope.js.map
